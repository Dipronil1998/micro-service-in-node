server {
  underscores_in_headers on;
  listen 8080;
  #listen 443 ssl;
  #ssl_certificate ./cert.crt;
  #ssl ssl_certificate_key ./key.key;
  #ssl_ciphers ALL:!aNULL:!ADH:!eNULL:!LOW:!EXP:RC4+RSA:+HIGH:+MEDIUM;
   add_header 'Access-Control-Allow-Origin' '';
   add_header 'Access-Control-Allow-Credentials' 'true';
   add_header 'Access-Control-Allow-Headers' * always;
   add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, HEAD';

   
  location /doc {
      
      proxy_pass http://master:4000/doc;
  }
  location /v1/auth {
      
      auth_request /v1/auth/platform/verify;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_pass http://auth:5000;
  }

  location /v1/base {
      
      auth_request /v1/auth/platform/verify;    
      
      proxy_pass http://master:4000;

  }

  location /v1/merchant {
      
      auth_request /v1/auth/user/token/jwt/verify;
      auth_request_set $user $upstream_http_user;       
      proxy_set_header user $user; 
      
      proxy_pass http://merchant:7000;
  }

  location /v1/admin {
      
      auth_request /v1/auth/user/token/jwt/verify;
      auth_request_set $user $upstream_http_user;  
      proxy_pass http://admin:8000;
  }
  
  location /v1/auth/platform/verify {
      internal;
      
      proxy_pass http://auth:5000/v1/auth/platform/verify; 
      proxy_pass_request_body off;
      proxy_set_header        Content-Length "";
      proxy_set_header        X-Original-URI $request_uri;
      

  }

  location /v1/auth/user/token/jwt/verify {
      internal;
      
      proxy_pass http://auth:5000/v1/auth/user/token/jwt/verify; 
      proxy_pass_request_body off;
      proxy_set_header        Content-Length "";
      proxy_set_header        X-Original-URI $request_uri;
      
  }

  error_page 502 @json502error;

  error_page 401 @json401error;

  error_page 404 @json404error;

  location @json404error {
      default_type application/json;
      return 404 "{success:false,errors:{error:\"Page Not Found\"}";
  }
  location @json502error {
        default_type application/json;
        return 502 "{success:false,errors:{error:\"Bad Gateway\"}";
  }
  location @json401error {
      
      default_type application/json;
      return 401 "{success:false,errors:{error:\"Unauthorised Acceess\"}}";
  }
}